package ru.avalon.java.dev.j10.labs.sort;

import ru.avalon.java.dev.j10.labs.Sort;

/**
 * Сортировка выбором (англ. selection sort).
 *
 * <p>Алгоритм сортировки. Может быть как устойчивый, так и
 * неустойчивый. На массиве из n элементов имеет время
 * выполнения в худшем, среднем и лучшем случае Θ(n2),
 * предполагая что сравнения делаются за постоянное время.
 *
 * @see <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%BE%D0%BC">Сортировка выбором</a>
 */
public class SelectionSort implements Sort {

    /**
     * {@inheritDoc}
     */
    public void sort(int[] array) {
        /*
         * TODO(Студент): Реализовать метод sort класса SelectionSort
         */
        
        /*  TODO (Проверка№1 ЛР№3)
            - Добавить коментарии к полям и методам класса
            - Перед обращением к массиву следует делать проверку на правильность массива,
            если array = null, возникает ошибка!!!
        */
        if (array!=null || array.length>0) {            //проверяем входящий массив на ошибку
            for (int i = 0; i < array.length-1; i++) {  //проходим циклом по элементам массива
            int least = i;                              //объявляем переменную для хранения индекса элемента с минимальным значением
                for (int j = i+1; j < array.length; j++) {  //проходим вложенным циклом по элементам массива 
                    if(array[j]<array[least]){              //находим элемент с минимальным значением в массиве
                        least = j;                          
                    }
                }
            
                int tmp = array[i];                     //обмениваем значение найденного минимального элемента в хвосте массива с неотсортированной позицией
                array[i] = array[least];
                array[least] = tmp;
            }
        }
    }
}
