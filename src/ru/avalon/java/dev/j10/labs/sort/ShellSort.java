package ru.avalon.java.dev.j10.labs.sort;

import ru.avalon.java.dev.j10.labs.Sort;

/**
 * Сортировка Шелла (англ. Shell sort).
 *
 * <p>Алгоритм сортировки, являющийся усовершенствованным
 * вариантом сортировки вставками. Идея метода Шелла состоит
 * в сравнении элементов, стоящих не только рядом, но и на
 * определённом расстоянии друг от друга. Иными словами —
 * это сортировка вставками с предварительными «грубыми»
 * проходами. Аналогичный метод усовершенствования
 * пузырьковой сортировки называется сортировка расчёской.
 *
 * @see <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D0%A8%D0%B5%D0%BB%D0%BB%D0%B0">Сортировка Шелла</a>
 */
public class ShellSort implements Sort {

    /**
     * {@inheritDoc}
     */
    
        /*
         * TODO(Студент): Реализовать метод sort класса ShellSort
         */
        
        /*  TODO (Проверка№1 ЛР№3)
            - Добавить коментарии к полям и методам класса
            - Перед обращением к массиву следует делать проверку на правильность массива,
            если array = null, возникает ошибка!!!
        */
    public void sort(int[] array) {             
        if (array!=null || array.length>0) {    //проверяем входящий массив на ошибку
            int h = 1;                  //инициализируем переменную для хранения значения инкремента
        while (h*3 < array.length)      //определяем максимальное значение инкремента
            h = h * 3 + 1;

        while(h >= 1) {
            hSort(array, h);            //передаем в метод сортировки массив и значение инкремента
            h = h/3;                    //с каждым циклом уменьшаем инкремент пока он не будет равен 1 или меньше
            }
        }
    }

    private void hSort(int[] array, int h) {            //метод для сортировки массива методом выбора с шагом, равным переданному значению инкремента
        for (int i = h; i < array.length; i++) {        //проходим внешним циклом по элементам массива начинася с элемента по индексу значения инкремента
            for (int j = i; j >= h; j = j - h) {        //проходим вложенным циклом по элементам массива с шагом, равным инкременту
                if (array[j] < array[j - h]){           //находим элемент с меньшим значением. чем текущий на вложенном цикле
                    int tmp = array[j];                 //обмениваем значение найденного минимального элемента в хвосте массива с неотсортированной позицией
                    array[j] = array[j - h];
                    array[j - h] = tmp; 
                } else break;
                
            }
        }
        
    }
}
